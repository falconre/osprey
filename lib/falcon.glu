let io = import! "std/io.glu"

let prelude = import! "std/prelude.glu"
let { (|>) } = prelude

let test = import! "std/test.glu"
let { assert } = test

let string = import! "std/string.glu"
let { (==) } = string.eq

type Expression = | Scalar   s
                  | Constant c
                  | Add      l r
                  | Sub      l r
                  | Mul      l r
                  | Divu     l r
                  | Modu     l r
                  | Divs     l r
                  | Mods     l r
                  | And      l r
                  | Or       l r
                  | Xor      l r
                  | Shl      l r
                  | Shr      l r
                  | Cmpeq    l r
                  | Cmpneq   l r
                  | Cmplts   l r
                  | Cmpltu   l r
                  | Zext     bits src
                  | Sext     bits src
                  | Trun     bits src

type Operation = | Assign dst src
                 | Store  dst index src
                 | Load   dst index src
                 | Brc    target condition
                 | Phi    dst src
                 | Raise  expr


let expression_match expression =
    let get_lhs = falcon_prim.expression_get_lhs
    let get_rhs = falcon_prim.expression_get_rhs
    let get_bits = falcon_prim.expression_get_bits

    let typ = falcon_prim.expression_type expression

    if typ == "scalar" then
        Scalar (falcon_prim.expression_get_scalar expression)
    else if typ == "constant" then
        Constant (falcon_prim.expression_get_constant expression)
    else if typ == "add" then
        Add (get_lhs expression) (get_rhs expression)
    else if typ == "sub" then
        Sub (get_lhs expression) (get_rhs expression)
    else if typ == "mul" then
        Mul (get_lhs expression) (get_rhs expression)
    else if typ == "divu" then
        Divu (get_lhs expression) (get_rhs expression)
    else if typ == "modu" then
        Modu (get_lhs expression) (get_rhs expression)
    else if typ == "divs" then
        Divs (get_lhs expression) (get_rhs expression)
    else if typ == "mods" then
        Mods (get_lhs expression) (get_rhs expression)
    else if typ == "and" then
        And (get_lhs expression) (get_rhs expression)
    else if typ == "or" then
        Or (get_lhs expression) (get_rhs expression)
    else if typ == "xor" then
        Xor (get_lhs expression) (get_rhs expression)
    else if typ == "shl" then
        Shl (get_lhs expression) (get_rhs expression)
    else if typ == "shr" then
        Shr (get_lhs expression) (get_rhs expression)
    else if typ == "cmpeq" then
        Cmpeq (get_lhs expression) (get_rhs expression)
    else if typ == "cmpneq" then
        Cmpneq (get_lhs expression) (get_rhs expression)
    else if typ == "cmplts" then
        Cmplts (get_lhs expression) (get_rhs expression)
    else if typ == "cmpltu" then
        Cmpltu (get_lhs expression) (get_rhs expression)
    else if typ == "zext" then
        Zext (get_bits expression) (get_rhs expression)
    else if typ == "sext" then
        Sext (get_bits expression) (get_rhs expression)
    else
        Trun (get_bits expression) (get_rhs expression)


let operation_match operation =
    let typ = falcon_prim.operation_type operation

    if typ == "assign" then
        Assign (falcon_prim.operation_assign_dst operation) (falcon_prim.operation_assign_src operation)
    else if typ == "store" then
        Store (falcon_prim.operation_store_dst operation) (falcon_prim.operation_store_index operation) (falcon_prim.operation_store_src operation)
    else if typ == "load" then
        Load (falcon_prim.operation_load_dst operation) (falcon_prim.operation_load_index operation) (falcon_prim.operation_load_src operation)
    else if typ == "brc" then
        Brc (falcon_prim.operation_brc_target operation) (falcon_prim.operation_brc_condition operation)
    else if typ == "raise" then
        Raise (falcon_prim.operation_raise_expr operation)
    else
        Phi 0 0


{
    constant_new = falcon_prim.constant_new,
    constant_value = falcon_prim.constant_value,
    constant_bits = falcon_prim.constant_bits,

    scalar_new = falcon_prim.scalar_new,
    scalar_name = falcon_prim.scalar_name,
    scalar_bits = falcon_prim.scalar_bits,

    expression_scalar = falcon_prim.expression_scalar,
    expression_constant = falcon_prim.expression_constant,
    expression_add = falcon_prim.expression_add,
    expression_sub = falcon_prim.expression_sub,
    expression_mul = falcon_prim.expression_mul,
    expression_divu = falcon_prim.expression_divu,
    expression_modu = falcon_prim.expression_modu,
    expression_divs = falcon_prim.expression_divs,
    expression_mods = falcon_prim.expression_mods,
    expression_and = falcon_prim.expression_and,
    expression_or = falcon_prim.expression_or,
    expression_xor = falcon_prim.expression_xor,
    expression_shl = falcon_prim.expression_shl,
    expression_shr = falcon_prim.expression_shr,
    expression_cmpeq = falcon_prim.expression_cmpeq,
    expression_cmpneq = falcon_prim.expression_cmpneq,
    expression_cmplts = falcon_prim.expression_cmplts,
    expression_cmpltu = falcon_prim.expression_cmpltu,
    expression_zext = falcon_prim.expression_zext,
    expression_sext = falcon_prim.expression_sext,
    expression_trun = falcon_prim.expression_trun,
    expression_match = expression_match,

    operation_assign = falcon_prim.operation_assign,
    operation_store = falcon_prim.operation_store,
    operation_load = falcon_prim.operation_load,
    operation_brc = falcon_prim.operation_brc,
    operation_raise = falcon_prim.operation_raise,
    operation_match = operation_match,

    control_flow_graph_blocks = falcon_prim.control_flow_graph_blocks,
    control_flow_graph_dot_graph = falcon_prim.control_flow_graph_dot_graph,

    function_control_flow_graph = falcon_prim.function_control_flow_graph,

    elf_base_address = falcon_prim.elf_base_address,
    elf_from_file = falcon_prim.elf_from_file,
    elf_function_entries = falcon_prim.elf_function_entries,
    elf_function = falcon_prim.elf_function,
    elf_memory = falcon_prim.elf_memory,

    function_entry_name = falcon_prim.function_entry_name,
    function_entry_address = falcon_prim.function_entry_address
}